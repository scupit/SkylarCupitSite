@use "mixins" as *;
@use "palette" as *;
@use "common" as *;

.grid-2-high {
  grid-row: span 2;
}

// Trying to span 2 columns when only 1 is present results
// in css creating another column, part of the "implicit grid"
// When that happens, title cards spanning '1 / -1' fail to find the end of the implicit grid.
// It's unfortunate, but I think I'll have to use JavaScript to set grid-column for this class
// based on the number of available columns.
// 
// If I also dynamically set an attribute for the number of columns on grids, I could use a selector
// like this:
// .grid-basic:not([columns-wide=1]) .grid-2-wide
// TODO: Maybe fix this, if it becomes an issue.

// .grid-2-wide {
//   grid-column: span 2;
// }

@for $i from 0 through 20 {
  .card:nth-child(#{$i}) {
  // *:nth-child(#{$i}) {
    // TODO: Refactor this so the slide-in code is not duplicated for each card.
    @include basic-slide-in($i);
  }
}

.grid-basic {
  display: grid;
  gap: $spacing-lg;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
}

.grid-basic + .grid-basic {
  margin-top: $spacing-lg;
}

// ########################################
// Split card grid
// ########################################

$split-card-outer-spacing: $spacing-sm;

.split-card-grid {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin: -$split-card-outer-spacing;
}

.split-card-grid > div {
  @include bg-fade;

  color: white;
  background-color: var(--primary);

  gap: $spacing-lg;
  padding: $spacing-lg;
  margin: $split-card-outer-spacing;
  border-radius: $br-sm;

  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  flex: 1;
  min-width: min(200px, 40vw);

  &:nth-child(3n + 1) {
    @include basic-slide-in(1);
  }
  
  &:nth-child(3n + 2) {
    @include basic-slide-in(2);
    @include slight-shadow;

    background-color: var(--accent);

    flex: 2;
    min-width: min(400px, 50vw);
  }

  &:nth-child(3n) {
    @include basic-slide-in(3);
  }

  & > .title:first-child {
    display: block;
    border-bottom: 2px solid white;
    font-size: $fs-2;
    color: white;
  }

  & > .centered-body {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
}
