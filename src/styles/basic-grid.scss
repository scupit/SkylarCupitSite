@import "./mixins.scss";
@import "./palette.scss";
@import "./spacing.scss";

$card-split-nums: 1, 2, 3, 4;

@each $n in $card-split-nums {
  .split-card-#{$n} {
    @extend .private-split-card-base; 

    grid-template-columns: repeat($n, 1fr);
    gap: $spacing-normal;
    // gap: $spacing-large;

    @media screen and (max-width: 840px) {
      grid-template-columns: repeat($n - 1, 1fr);
      // This grid-template-rows might not even be necessary. It just ensures the two left boxes have equal length.
      grid-template-rows: repeat($n - 2, 1fr);
    }
  }
}

.private-split-card-base {
  flex: 1;
  display: grid;
  max-width: 100%;
  min-height: 50vh;

  & & {
    min-height: unset;
  }

  .card-block .card:not(.title-card) {
    opacity: 1;
    animation: none;
  }

  @include large-screen-only {
    margin: $spacing-small;
  }

  @media screen and (max-width: 840px) {
    & > .big-card {
      grid-row: auto / span 2;
    }
  }

  @include small-screen-only {
    grid-template-columns: repeat(1, 1fr);
    grid-template-rows: unset;
  }

  p {
    font-size: large;
    margin: 0;
  }

  & > div {
    color: white;
    border-radius: 5px;
    background-color: $primary;
    padding: $spacing-normal;
    display: block;

    &.flexed-col {
      display: flex;
      flex-direction: column;
    }

    &.flexed-row {
      display: flex;
      flex-direction: row;
    }

    & > .title-area,
    &.big-card > .title-area
    {
      @include slight-shadow;
      // @include basic-gradient-bg($contact-box-color);
      // background-color: $accent;
      background-color: $primary;
      margin-bottom: $spacing-normal;
      padding: $spacing-normal;
      border-radius: 10px;
    }

    & > h1:first-child,
    & > h2:first-child,
    .title-area > h1:first-child,
    .title-area > h2:first-child
    {
      display: block;
      border-bottom: 2px solid white;
      margin-bottom: $spacing-normal;
    }

    @for $i from 0 through 20 {
      &:nth-child(#{$i}) {
        @include basic-slide-in($i);
      }
    }

    &.big-card {
      background-color: $accent;

      @include large-screen-only {
        grid-column: auto / span 2;
      }

      @include medium-screen-only {
        grid-column: auto / span 2;
      }

      @include small-screen-only {
        grid-row: auto / span 2;
      }
    }

    & > .title-area {
      & > h1:first-child, & > h2:first-child {
        display: block;
        border-bottom: 2px solid white;
        margin-bottom: $spacing-normal;
      }
    }

    &.no-bg {
      background: none;
      padding: 0;
    }
  }

  .contact-box {
    flex: 1;
    display: flex;

    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .about-me-box {
    display: flex;
    flex-direction: column;
  }


  .about-me-box .about-me-body {
    display: flex;
    flex: 1;
    flex-direction: row;
    align-items: center;

    @include small-screen-only {
      flex-direction: column;
    }

    & > div {
      flex: 1;
    }
  }
}

.card-block {
  color: black;
  // color: white;
  flex: 1;
  display: grid;

  gap: $spacing-large;

  @include small-screen-only {
    gap: $spacing-small;
  }

  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));

  @for $i from 0 through 20 {
    .card:nth-child(#{$i}) {
      @include basic-slide-in($i);

      &.title-card {
        animation: none;
        opacity: 1;
      }
    }
  }

  p {
    font-size: 1rem;
  }

  &.image-container-root {
    // align-items: center;
    align-items: flex-end;
  }

  .card {
    $radius-size: 10px;

    @include slight-shadow;

    display: flex;
    flex-direction: column;

    background-color: lighten($primary, 13%);
    border-radius: $radius-size;
    min-height: 150px;
    padding: $spacing-small;

    &.no-outer-pad {
      padding: 0;
    }

    & > h2:first-child,
    & > h3:first-child
    {
      $inner-radius-size: 7.5px;
      color: white;
      background-color: $primary;
      // border-radius: $radius-size $radius-size 0 0;
      border-radius: $inner-radius-size $inner-radius-size 0 0;
      padding: $spacing-small;
      text-align: center;

      &.contrast-bg {
        background-color: darken($contact-box-color, 10%);
      }

      &.dark-bg {
        background-color: $accent;
      }
    }

    ul, ol {
      margin-top: $spacing-normal;
      margin-bottom: $spacing-normal;
    }

    .card-body {
      padding: $spacing-normal;
    }

    .card-body-cramped {
      padding: $spacing-small;
    }

    .image-container {
      display: flex;
      flex-direction: column;
      flex: 1;
      align-items: center;
      justify-content: center;
      
      img {
        max-width: 100%;
        max-height: 100%;
        border-radius: 10px;
      }
    }

    .contrast-bg + .image-container > img {
      border-radius: 0 0 10px 10px;
    }
  }

  .title-card {
    @include basic-gradient-bg($contact-box-color);
    grid-column: 1 / -1;
    padding: $spacing-large;
    min-height: unset;

    & > .white-title {
      color: white;
    }

    .page-title {
      color: white;
      font-size: 2.5rem;
    }
  }

  .card-tall {
    grid-row: span 2 / auto;
  }

  .card-long {
    grid-column: span 2 / auto;
  }
}

@include small-screen-only {
  .card-block {
    grid-template-columns: 1fr;

    .card {
      margin: $spacing-small;
      grid-column: span 2 / auto;

      ul, ol {
        line-height: 1.3em;
      }
    }

    .title-card .page-title {
      font-size: 2rem;
    }
  }
}

// .col-sm-2

@for $i from 1 to 4 {
  $size-map: (
    "sm": "small",
    "md": "medium",
    "lg": "large"
  );

  @each $size-name, $prefix-name in $size-map {
    .col-#{$size-name}-#{$i} {
      $col-span: auto / span $i;

      // This is annoying... but SCSS doesn't accept interpolation in variable names
      // yet. Refactor this when that's possible.
      @if $size-name == "sm" {
        @include small-screen-only {
          grid-column: $col-span;
        }
      }
      @else if $size-name == "md" {
        @include medium-screen-only {
          grid-column: $col-span;
        }
      }
      @else if $size-name == "lg" {
        @include large-screen-only {
          grid-column: $col-span;
        }
      }
    }

    .row-#{$size-name}-#{$i} {
      $row-span: auto / span $i;

      // This is annoying... but SCSS doesn't accept interpolation in variable names
      // yet. Refactor this when that's possible.
      @if $size-name == "sm" {
        @include small-screen-only {
          grid-row: $row-span;
        }
      }
      @else if $size-name == "md" {
        @include medium-screen-only {
          grid-row: $row-span;
        }
      }
      @else if $size-name == "lg" {
        @include large-screen-only {
          grid-row: $row-span;
        }
      }
    }

  }
}
